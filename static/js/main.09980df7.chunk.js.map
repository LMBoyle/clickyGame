{"version":3,"sources":["components/CharCard/Char.js","components/CharCard/CharCard.js","components/Wrapper/Wrapper.js","components/HeadDiv/HeadDiv.js","components/Title/Title.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Char","props","character","id","name","img","className","alt","src","CharCard","onClick","characters","Wrapper","children","HeadDiv","Title","Score","App","state","initCharacters","score","shuffle","alert","setState","sort","a","b","Math","random","setClicked","console","log","clickedChar","find","char","isClicked","map","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o1EAqBeA,MAfb,SAAcC,GAAQ,IAAD,EACOA,EAAMC,UAAxBC,EADW,EACXA,GAAIC,EADO,EACPA,KAAMC,EADC,EACDA,IAElB,OACE,yBAAKC,UAAU,gBAAgBH,GAAIA,GACjC,yBACEI,IAAKH,EACLI,IAAKH,MCOAI,MAZf,SAAkBR,GAChB,OACE,yBAAKK,UAAU,OAAOI,QAAS,kBAAMT,EAAMS,QAAQT,EAAMU,WAAWR,MAClE,kBAAC,EAAD,CACED,UAAWD,EAAMU,e,MCCVC,MANf,SAAiBX,GACf,OAAO,yBAAKK,UAAU,WAAWL,EAAMY,W,MCK1BC,MANf,SAAiBb,GACf,OAAO,yBAAKK,UAAU,WAAWL,EAAMY,W,MCK1BE,MANf,SAAed,GACb,OAAO,wBAAIK,UAAU,SAASL,EAAMY,W,MCKvBG,MANf,SAAef,GACb,OAAO,yBAAKK,UAAU,SAASL,EAAMY,W,yOCsFxBI,E,2MA/EbC,MAAQ,CACNP,WAAYQ,EACZC,MAAO,G,EAITC,QAAU,WACiB,KAArB,EAAKH,MAAME,MACbE,MAAO,YAGP,EAAKC,SAAS,CACZZ,WAAY,EAAKO,MAAMP,WAAWa,MAAK,SAASC,EAAEC,GAChD,MAAO,GAAMC,KAAKC,e,EAO1BC,WAAa,SAAA1B,GACX2B,QAAQC,IAAI,sBAAwB5B,EAAK,cAEzC,IAAI6B,EAAc,EAAKd,MAAMP,WAAWsB,MAAK,SAAAC,GAAI,OAAIA,EAAK/B,KAAOA,KAI5D6B,EAAYG,WAefb,MAAM,cACNQ,QAAQC,IAAI,aAAc,EAAKb,MAAMP,WAAWyB,KAAI,iBAAO,CAAED,WAAU,OAEvE,EAAKZ,SAAS,CACZZ,WAAY,EAAKU,QAAQ,EAAKH,MAAMP,WAAWyB,KAAK,SAAAlC,GAAe,O,yVAAO,CAAP,GAAYA,EAAZ,CAAuBiC,WAAY,QACtGf,MAAO,IAETU,QAAQC,IAAI,SACZD,QAAQC,IAAI,EAAKb,MAAMP,YACvBmB,QAAQC,IAAI,sEAvBZC,EAAYG,WAAY,EAExB,EAAKZ,SAAS,CACZZ,WAAY,EAAKO,MAAMP,WACvBS,MAAO,EAAKF,MAAME,MAAQ,IAG5B,EAAKC,UACLS,QAAQC,IAAI,aACZ,EAAKb,MAAMP,WAAWyB,KAAI,SAAAlC,GAAS,OAAI4B,QAAQC,IAAI7B,EAAUE,KAAO,IAAMF,EAAUiC,cACpFL,QAAQC,IAAI,sE,wEAmBN,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qCACA,kBAAC,EAAD,gBAAgBM,KAAKnB,MAAME,MAA3B,MAGDiB,KAAKnB,MAAMP,WAAWyB,KAAI,SAAAlC,GAAS,OAClC,kBAAC,EAAD,CACEoC,IAAKpC,EAAUC,GACfQ,WAAYT,EACZQ,QAAS,kBAAM,EAAKmB,WAAW3B,EAAUC,e,GAvEnCoC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.09980df7.chunk.js","sourcesContent":["// Imports ===================================================================\r\n\r\nimport React from \"react\";\r\nimport \"./CharCard.css\";\r\n\r\n// Functions =================================================================\r\n  function Char(props) {\r\n    const { id, name, img } = props.character;\r\n\r\n    return (\r\n      <div className=\"img-container\" id={id}>\r\n        <img \r\n          alt={name} \r\n          src={img} \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n// Export ====================================================================\r\n\r\nexport default Char","// Imports ===================================================================\r\n\r\nimport React from \"react\";\r\nimport \"./CharCard.css\";\r\nimport Char from \"./Char\"\r\n\r\n// Functions =================================================================\r\n\r\nfunction CharCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.onClick(props.characters.id)}>\r\n      <Char \r\n        character={props.characters}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n// Export ====================================================================\r\n\r\nexport default CharCard\r\n","// Imports ===================================================================\n\nimport React from \"react\";\nimport \"./Wrapper.css\";\n\n// Functions =================================================================\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\n// Export ====================================================================\n\nexport default Wrapper;\n","// Imports ===================================================================\r\n\r\nimport React from \"react\";\r\nimport \"./HeadDiv.css\";\r\n\r\n// Functions =================================================================\r\n\r\nfunction HeadDiv(props) {\r\n  return <div className=\"headDiv\">{props.children}</div>;\r\n}\r\n\r\n// Export ====================================================================\r\n\r\nexport default HeadDiv;\r\n","// Imports ===================================================================\n\nimport React from \"react\";\nimport \"./Title.css\";\n\n// Functions =================================================================\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\n// Export ====================================================================\n\nexport default Title;\n","// Imports ===================================================================\r\n\r\nimport React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n// Functions =================================================================\r\n\r\nfunction Score(props) {\r\n  return <div className=\"score\">{props.children}</div>;\r\n}\r\n\r\n// Export ====================================================================\r\n\r\nexport default Score;\r\n","// Imports ===================================================================\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport CharCard from \"./components/CharCard/CharCard\"\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport HeadDiv from \"./components/HeadDiv/HeadDiv\"\nimport Title from \"./components/Title/Title\";\nimport Score from \"./components/Score/Score\";\nimport initCharacters from \"./characters.json\"\n\n// Functions =================================================================\n\nclass App extends Component {\n  \n  state = {\n    characters: initCharacters,\n    score: 0,\n  };\n\n  // Shuffle the cards\n  shuffle = () => {\n    if (this.state.score === 12) {\n      alert (\"you win!\")\n    }\n    else {\n      this.setState({\n        characters: this.state.characters.sort(function(a,b){\n          return 0.5 - Math.random()\n        })\n      })\n    }\n  }\n\n  // When clicked, set the character to clicked\n  setClicked = id => {\n    console.log(\"you clicked on the \" + id + \" character\");\n    // Find the character with the id of the clicked card\n    let clickedChar = this.state.characters.find(char => char.id === id);\n\n\n    // If is clicked is false\n    if (!clickedChar.isClicked) {\n      clickedChar.isClicked = true\n    \n      this.setState({\n        characters: this.state.characters,\n        score: this.state.score + 1\n      })\n      // Shuffle\n      this.shuffle()\n      console.log(\"Updated\\n\") \n      this.state.characters.map(character => console.log(character.name + \" \" + character.isClicked))\n      console.log(\"================================================================\")\n    }\n    // If is clicked is true\n    else {\n      alert(\"Game Over!\")\n      console.log(\"resetting!\", this.state.characters.map(() => ({ isClicked:false })));\n\n      this.setState({ \n        characters: this.shuffle(this.state.characters.map( character => { return { ...character, isClicked : false } })),\n        score: 0\n      })\n      console.log(\"reset\")\n      console.log(this.state.characters)\n      console.log(\"================================================================\")\n      // Shuffle\n\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <HeadDiv>\n          <Title> Rick and Morty Clicky Game </Title>\n          <Score> Score: {this.state.score} </Score>\n        </HeadDiv>\n\n        {this.state.characters.map(character => (\n          <CharCard\n            key={character.id}\n            characters={character}\n            onClick={() => this.setClicked(character.id)}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\n// Export ====================================================================\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below.. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}